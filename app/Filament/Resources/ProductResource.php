<?php

namespace App\Filament\Resources;

use App\Filament\Resources\ProductResource\Pages;
use App\Filament\Resources\ProductResource\RelationManagers;
use App\Models\Product;
use App\Services\CategoryService;
use Filament\Forms;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class ProductResource extends Resource
{
    protected static ?string $model = Product::class ;

    protected static ?string $navigationIcon = 'heroicon-o-shopping-bag';

    protected static ?string $navigationLabel = 'Товары';
    protected static ?string $navigationGroup = 'Товары';



    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                TextInput::make('sid')
                    ->numeric(),
                Forms\Components\TextInput::make('tovar_id')
                    ->maxLength(128),
                Forms\Components\TextInput::make('id_parent')
                    ->required()
                    ->maxLength(128),
                Forms\Components\TextInput::make('article')
                    ->maxLength(64),
                Forms\Components\TextInput::make('title')
                    ->required()
                    ->maxLength(512),
                Forms\Components\TextInput::make('url')
                    ->maxLength(512),
                Forms\Components\TextInput::make('title_full')
                    ->maxLength(512),
                Forms\Components\TextInput::make('title_original')
                    ->maxLength(512),
                Forms\Components\Textarea::make('content')
                    ->columnSpanFull(),
                Forms\Components\TextInput::make('price')
                    ->required()
                    ->numeric()
                    ->prefix('$'),
                Forms\Components\TextInput::make('count_in_box')
                    ->numeric(),
                Forms\Components\TextInput::make('v_box')
                    ->numeric(),
                Forms\Components\TextInput::make('weight_box')
                    ->numeric(),
                Forms\Components\TextInput::make('weight_1')
                    ->numeric(),
                Forms\Components\TextInput::make('v_1')
                    ->numeric(),
                Forms\Components\TextInput::make('total')
                    ->required()
                    ->numeric()
                    ->default(0),
                Forms\Components\TextInput::make('catalog_id')
                    ->numeric()
                    ->default(0),
                Forms\Components\TextInput::make('filtr_size')
                    ->maxLength(128),
                Forms\Components\TextInput::make('sale')
                    ->required(),
                Forms\Components\DateTimePicker::make('date'),
                Forms\Components\DateTimePicker::make('date_update'),
                Forms\Components\TextInput::make('photo')
                    ->required(),
                Forms\Components\TextInput::make('sklad'),
                Forms\Components\TextInput::make('photo_src')
                    ->maxLength(200),
            ]);
    }

    public static function table(Table $table): Table
    {


        $table->columns([

                Tables\Columns\TextColumn::make('id')
                    ->numeric()
                    ->sortable(),
                Tables\Columns\TextColumn::make('tovar_id')
                    ->searchable(),
                Tables\Columns\TextColumn::make('article')
                    ->searchable(),
                Tables\Columns\TextColumn::make('title')
                    ->searchable(),
                Tables\Columns\TextColumn::make('title_original')
                    ->searchable(),
                Tables\Columns\TextColumn::make('price')
                    ->money()


            ])

            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);

        return $table;


    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListProducts::route('/'),
            'create' => Pages\CreateProduct::route('/create'),
            'edit' => Pages\EditProduct::route('/{record}/edit'),
        ];
    }
    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::count(); // TODO: Change the autogenerated stub
    }
}
